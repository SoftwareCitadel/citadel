package storagePages

import (
	"fmt"
	"math"
	"citadel/app/models"
	"citadel/views/layouts"
)

templ Show(storageBucket models.StorageBucket, storageFiles []models.StorageFile, bucketSize float64) {
	@layouts.DashboardLayout(layouts.DashboardLayoutProps{
		Class: "!p-0",
	}) {
		@breadcrumbs(storageBucket)
		@tabs(storageBucket)
		@storageBucketInfo(storageBucket, bucketSize)
		@fileBrowser(storageBucket, storageFiles)
	}
}

templ storageBucketInfo(storageBucket models.StorageBucket, size float64) {
	<div class="pb-6 px-12 border-b border-zinc-300/20">
		<div class="grid grid-cols-2 md:grid-cols-5 lg:grid-cols-7 items-end overflow-x-auto">
			<div class="flex flex-col">
				<p class="text-zinc-300 text-sm font-semibold">Status</p>
				<div class="flex space-x-2 items-center mt-1">
					<div>
						<div class="flex-none rounded-full p-1 bg-emerald-400/10 text-emerald-400 ring-1 ring-inset ring-emerald-400/20">
							<div class="h-2 w-2 rounded-full bg-current animate-pulse"></div>
						</div>
					</div>
					<p class="text-sm text-white">Available</p>
				</div>
			</div>
			<div class="flex flex-col">
				<div class="flex items-center space-x-2 pt-6">
					<p class="text-zinc-300 text-sm font-semibold">Bucket Size</p>
				</div>
				<div class="flex space-x-2 items-center">
					<p class="text-sm text-white">{ formatFileSize(size) }</p>
				</div>
			</div>
		</div>
		@storageBucketCodeBlock(storageBucket)
	</div>
}

// floorToTwoDecimals floors a number to two decimal places
func floorToTwoDecimals(num float64) float64 {
	return math.Floor(num*100) / 100
}

// formatFileSize formats the file size into human-readable string
func formatFileSize(size float64) string {
	if size < 1024 {
		return fmt.Sprintf("%.0fB", size)
	} else if size < 1024*1024 {
		return fmt.Sprintf("%.2fKB", floorToTwoDecimals(size/1024))
	} else if size < 1024*1024*1024 {
		return fmt.Sprintf("%.2fMB", floorToTwoDecimals(size/(1024*1024)))
	} else {
		return fmt.Sprintf("%.2fGB", floorToTwoDecimals(size/(1024*1024*1024)))
	}
}
