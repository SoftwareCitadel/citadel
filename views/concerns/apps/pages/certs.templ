package appsPages

import (
	"citadel/views/layouts"
	"citadel/app/models"
	"citadel/views/ui"
	"strconv"
)

templ CertsPage(app models.Application, certs []models.Certificate) {
	@layouts.DashboardLayout(layouts.DashboardLayoutProps{Class: "!p-0"}) {
		@breadcrumbs(app)
		@tabs(app)
		<main class="px-12">
			@ui.Card(ui.CardProps{Title: "Certificates", Class: "!px-0"}) {
				<form class="flex items-start px-6" hx-post={ "/apps/" + app.Slug + "/certs" }>
					<span class="flex rounded-l-md border-r-0 border border-zinc-300/20 bg-white/5 text-zinc-300/90 font-medium px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 rounded-r-none">
						https://
					</span>
					<input class="base-input !rounded-l-none !rounded-r-none" id="domain" name="domain" placeholder="acme.com"/>
					@ui.Button(ui.ButtonProps{
						Variant: ui.ButtonVariantPrimary,
						Class:   "!rounded-l-none !py-[9px]",
					}) {
						Add
					}
				</form>
				<div class="px-6">
					for _, cert := range certs {
						@certCard(app, cert)
					}
				</div>
			}
		</main>
	}
}

templ certCard(app models.Application, cert models.Certificate) {
	@ui.Card(ui.CardProps{
		Header:    certCardHeader(app, cert),
		NoContent: cert.Status == models.CertificateStatusVerified,
	}) {
		if cert.Status != models.CertificateStatusVerified {
			<div class="text-zinc-100 text-sm">Add these entries to your domain's DNS configuration.</div>
			for i, entry := range cert.DnsEntries {
				@dnsEntry(cert.ID+"-"+strconv.Itoa(i), entry)
			}
		}
	}
}

templ certCardHeader(app models.Application, cert models.Certificate) {
	<div class="flex justify-between items-center">
		<a class="hover:opacity-75 transition-opacity text-zinc-100" href={ "https://" + templ.SafeURL(cert.Domain) } target="_blank">
			<div class="flex items-center space-x-2">
				<span class="font-semibold">{ cert.Domain }</span>
				<svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
				</svg>
			</div>
		</a>
		<div class="flex gap-x-2 items-center">
			@ui.Button(ui.ButtonProps{
				Variant: ui.ButtonVariantSecondary,
				HxPost:  "/apps/" + app.Slug + "/certs/" + cert.ID + "/check",
			}) {
				Check
			}
			@ui.Button(ui.ButtonProps{Variant: ui.ButtonVariantDanger, OnClick: ui.OpenDialog("delete-cert-" + cert.ID)}) {
				Delete
			}
		</div>
	</div>
	if cert.Status == models.CertificateStatusVerified {
		<div class="flex space-x-2 items-center">
			<i class="fa-solid fa-check text-emerald-300 p-1 h-2 w-2 rounded-full border border-emerald-300"></i>
			<span class="text-zinc-300 text-sm">Certificate is verified.</span>
		</div>
	} else {
		<div class="flex space-x-2 items-center">
			<svg class="w-6 h-6 text-red-300" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
			<span class="text-zinc-300 text-sm">Invalid configuration.</span>
		</div>
	}
	@ui.Dialog(ui.DialogProps{
		Id:          "delete-cert-" + cert.ID,
		Title:       "Delete certificate",
		Description: "Are you sure you want to delete this certificate?",
	}) {
		@ui.Button(ui.ButtonProps{Variant: ui.ButtonVariantDanger, HxDelete: "/apps/" + app.Slug + "/certs/" + cert.ID}) {
			Delete certificate
		}
	}
}

templ dnsEntry(id string, dnsEntry models.DnsEntry) {
	<div class="flex mt-4 items-center space-x-8">
		<div class="flex items-start w-1/2">
			<span class="bg-zinc-900 text-white py-2 px-4 text-sm rounded-l border-r-0 border-zinc-300/20 border duration-200 flex items-center justify-center">
				{ dnsEntry.Type }
			</span>
			<input value={ dnsEntry.Hostname } class="base-input !rounded-l-none !rounded-r-none" readonly/>
			<button
				class="bg-zinc-900 hover:opacity-75 transition text-white px-4 py-[11px] text-sm rounded-r border-l-0 border-zinc-300/20 border duration-200 flex items-center justify-center"
				onClick={ ui.CopyValueToClipboard("hostname-icon-"+id, dnsEntry.Hostname) }
			>
				<i class="fa-regular fa-copy" id={ "hostname-icon-" + id }></i>
			</button>
		</div>
		<span class="text-zinc-100">â†’</span>
		<div class="flex items-start w-1/2">
			<input value={ dnsEntry.Value } class="base-input !rounded-r-none" readonly/>
			<button
				class="bg-zinc-900 hover:opacity-75 transition text-white px-4 py-[11px] text-sm rounded-r border-l-0 border-zinc-300/20 border duration-200 flex items-center justify-center"
				onClick={ ui.CopyValueToClipboard("value-icon-"+id, dnsEntry.Value) }
			>
				<i class="fa-regular fa-copy" id={ "value-icon-" + id }></i>
			</button>
		</div>
	</div>
}
