package appsPages

import (
	"fmt"
	"citadel/internal/models"
	"citadel/views/ui"
	"github.com/google/go-github/v62/github"
	"citadel/internal/types"
	"citadel/views/util"
)

templ breadcrumbs(app models.Application) {
	<div class="flex flex-col items-start justify-between gap-x-8 gap-y-4 py-4 px-12 sm:flex-row sm:items-center border-b border-zinc-300/20">
		<div class="flex items-center gap-x-3">
			<h1 class="flex gap-x-3 text-base leading-7 items-center">
				<a class="hover:opacity-75 transition" href="/apps">
					<i class="fa-solid fa-terminal w-4 h-4 text-zinc-300"></i>
				</a>
				<span class="!text-zinc-300">/</span>
				<div class="flex gap-x-2">
					<span class="font-semibold text-zinc-300">{ app.Name }</span>
					if app.Slug != app.Name {
						<span class="text-zinc-300">({ app.Slug })</span>
					}
				</div>
			</h1>
		</div>
	</div>
}

templ tabs(app models.Application) {
	<nav class="flex overflow-x-auto border-b border-zinc-300/20 py-4 px-12">
		<ul class="flex min-w-full flex-none gap-x-6 text-sm leading-6 text-zinc-300">
			@tab(util.Route(ctx, "/apps/"+app.Slug), "Overview")
			@tab(util.Route(ctx, "/apps/"+app.Slug+"/logs"), "Logs")
			@tab(util.Route(ctx, "/apps/"+app.Slug+"/deployments"), "Deployments")
			@tab(util.Route(ctx, "/apps/"+app.Slug+"/env"), "Environment variables")
			@tab(util.Route(ctx, "/apps/"+app.Slug+"/certs"), "Certificates")
			@tab(util.Route(ctx, "/apps/"+app.Slug+"/edit"), "Settings")
		</ul>
	</nav>
}

templ tab(path, label string) {
	<li>
		<a
			class={ util.GetClassForTab(path, util.RetrievePath(ctx)) }
			href={ templ.URL(path) }
		>
			{ label }
		</a>
	</li>
}

templ computingSpecsFormPart(app *models.Application) {
	<script>
		const resourcesConfiguration = {
			'shared-cpu-1x': ['256MB', '512MB', '1GB', '2GB'],
			'shared-cpu-2x': ['512MB', '1GB', '2GB', '4GB'],
			'shared-cpu-4x': ['1GB', '2GB', '4GB', '8GB'],
			'shared-cpu-8x': ['2GB', '4GB', '8GB', '16GB'],

			'performance-cpu-1x': ['2GB', '4GB', '8GB'],
			'performance-cpu-2x': ['4GB', '8GB', '16GB'],
			'performance-cpu-4x': ['8GB', '16GB', '32GB'],
			'performance-cpu-8x': ['16GB', '32GB', '64GB'],
			'performance-cpu-16x': ['32GB', '64GB', '128GB'],
		}
	</script>
	<div
		if app == nil {
			x-data="{ cpuIdx: 0, ramIdx: 0 }"
		} else {
			x-data={ fmt.Sprintf("{ cpuIdx: Object.keys(resourcesConfiguration).indexOf('%s'), ramIdx: resourcesConfiguration['%s'].indexOf('%s') }", app.CpuConfig, app.CpuConfig, app.RamConfig) }
		}
		x-init="$watch('cpuIdx', () => ramIdx = 0)"
	>
		<input
			readonly
			x-model="Object.keys(resourcesConfiguration)[cpuIdx]"
			name="cpu_config"
			type="hidden"
		/>
		<input
			readonly
			x-model="resourcesConfiguration[Object.keys(resourcesConfiguration)[cpuIdx]][ramIdx]"
			name="ram_config"
			type="hidden"
		/>
		@ui.InputField(ui.InputFieldProps{
			Label:       "CPU Configuration",
			Placeholder: "myorg/webapp",
			Type:        "range",
			Icon:        "fa-microchip",
			Extra: map[string]any{
				"value":   "0",
				"min":     "0",
				"max":     "7",
				"step":    "1",
				"x-model": "cpuIdx",
			},
		}) {
			<p
				class="text-sm text-white text-center"
				x-text="Object.keys(resourcesConfiguration)[cpuIdx]"
			></p>
		}
		@ui.InputField(ui.InputFieldProps{
			DivClass:    "mt-2",
			Label:       "RAM Configuration",
			Placeholder: "myorg/webapp",
			Type:        "range",
			Icon:        "fa-memory",
			Extra: map[string]any{
				"value":      "0",
				"min":        "0",
				"x-bind:max": "resourcesConfiguration[Object.keys(resourcesConfiguration)[cpuIdx]].length - 1",
				"x-model":    "ramIdx",
				"step":       "1",
			},
		}) {
			<p
				class="text-sm text-white text-center"
				x-text="resourcesConfiguration[Object.keys(resourcesConfiguration)[cpuIdx]][ramIdx]"
			></p>
		}
	</div>
}

templ ConnectGitHubRepositoryList(owners []types.GithubOwner, reposMap map[string][]*github.Repository) {
	if len(owners) == 0 {
		<div></div>
	} else {
		<div x-data={ fmt.Sprintf("{ selectedOwner: '%s' }", owners[0].GetLogin()) }>
			<div class="px-6 py-4 border-t border-zinc-300/10">
				@ui.SelectField(ui.SelectFieldProps{
					Label:   "Select an owner",
					Options: getOwnersSelectOptions(owners),
					Value:   owners[0].GetLogin(),
					Extra: map[string]any{
						"x-model": "selectedOwner",
					},
				})
			</div>
			for owner, repos := range reposMap {
				<ul x-show={ fmt.Sprintf("selectedOwner === '%s'", owner) } class="divide-y divide-zinc-300/10 border-t border-zinc-300/10 max-h-[50vh] overflow-y-auto">
					for _, repo := range repos {
						@connectGitHubRepositoryListItem(repo)
					}
				</ul>
			}
		</div>
	}
}

templ connectGitHubRepositoryListItem(repo *github.Repository) {
	<li class="flex justify-between py-4 px-6">
		<div class="flex flex-col space-y-2">
			<div class="flex">
				<a
					class="flex space-x-2 items-center text-white hover:opacity-75 transition-opacity"
					href={ templ.URL("https://github.com/" + repo.GetFullName()) }
					target="_blank"
				>
					<span class="text-sm font-semibold">{ repo.GetName() }</span>
					<i class="fa-solid fa-arrow-up-right-from-square w-3 h-3"></i>
				</a>
			</div>
			<div class="flex items-center space-x-2 text-yellow-400">
				<i class="fa-solid fa-code-branch w-3 h-3"></i>
				<span class="text-sm">{ repo.GetDefaultBranch() }</span>
			</div>
		</div>
		<div class="flex space-x-2 items-center">
			if repo.GetPrivate() {
				<i class="text-yellow-400 fa-solid fa-lock h-3 w-3"></i>
			}
			@ui.Button(ui.ButtonProps{
				Variant: ui.ButtonVariantPrimary,
				Type:    "button",
				Extra: map[string]any{
					"@click": fmt.Sprintf("$dispatch('connect-repository', { installationId: %d, repository: '%s', branch: '%s' })", repo.GetID(), repo.GetFullName(), repo.GetDefaultBranch()),
				},
			}) {
				Connect
			}
		</div>
	</li>
}

func getOwnersSelectOptions(owners []types.GithubOwner) []ui.SelectFieldOption {
	var options []ui.SelectFieldOption
	for _, owner := range owners {
		options = append(options, ui.SelectFieldOption{
			Label: owner.GetLogin(),
			Value: owner.GetLogin(),
		})
	}

	return options
}
