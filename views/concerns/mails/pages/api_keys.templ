package mailsPages

import (
	"citadel/internal/models"
	"citadel/views/layouts"
	"citadel/views/ui"
	"citadel/views/concerns/mails/components"
)

templ APIKeysPage(mailDomains []models.MailDomain, apiKeys []models.MailApiKey) {
	@layouts.DashboardLayout(layouts.DashboardLayoutProps{Class: "!p-0"}) {
		@mailsComponents.Tabs()
		<div class="flex flex-col py-8 px-12">
			<div class="flex items-center space-x-4">
				<h2 class="text-3xl text-gradient font-semibold font-clash">
					API Keys
				</h2>
				@ui.Button(ui.ButtonProps{
					Icon:    "fa-solid fa-plus",
					OnClick: ui.OpenDialog("add_api_key"),
				}) {
					Add API Key
				}
				@addApiKeyDialog(mailDomains)
			</div>
			<h3 class="mt-2 text-zinc-300 text-sm">
				API keys are used to access the Facteur API. You can create or revoke them at any time.
			</h3>
			<div class="mt-8 flow-root">
				<div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
					<div class="inline-block min-w-full py-2 align-middle px-4 sm:px-6 lg:px-8">
						<div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 rounded-lg border border-zinc-700">
							<table class="min-w-full divide-y divide-zinc-700">
								<thead class="bg-zinc-900">
									<tr>
										<th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-white sm:pl-6">
											Name
										</th>
										<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white">
											Domain Access
										</th>
										<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white">
											Value
										</th>
										<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white">
											Created at
										</th>
										<th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
											<span class="sr-only">Edit</span>
										</th>
									</tr>
								</thead>
								<tbody class="divide-y divide-zinc-700 bg-white/2.5">
									if len(apiKeys) == 0 {
										<tr>
											<td class="py-4 pl-4 pr-3 text-sm font-medium text-zinc-300 sm:pl-6" colspan="5">
												No API key added yet.
											</td>
										</tr>
									}
									for _, apiKey := range apiKeys {
										@apiKeysTableItem(apiKey)
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ apiKeysTableItem(apiKey models.MailApiKey) {
	<tr>
		<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-zinc-300 sm:pl-6">
			{ apiKey.Name }
		</td>
		<td class="whitespace-nowrap px-3 py-4 text-sm text-zinc-300">
			if apiKey.MailDomainID == "" {
				All Domains
			} else {
				{ apiKey.MailDomain.Domain }
			}
			//   {{ apiKey.domain?.domain || t('dashboard.ALL_DOMAINS') }}
		</td>
		<td class="whitespace-nowrap px-3 py-4 text-sm text-zinc-300 flex">
			<div class="flex !w-full">
				<input value={ apiKey.Value } class="base-input max-w-64 !rounded-r-none" readonly/>
				<button
					class="bg-zinc-900 hover:opacity-75 transition text-white px-4 py-[6px] text-sm rounded-r border-l-0 border-zinc-300/20 border duration-200 flex items-center justify-center"
					onClick={ ui.CopyValueToClipboard("uri", apiKey.Value) }
				>
					<i class="fa-regular fa-copy" id="uri"></i>
				</button>
			</div>
		</td>
		<td class="whitespace-nowrap px-3 py-4 text-sm text-zinc-300">
			{ apiKey.CreatedAt.Format("2006-01-02 15:04:05") }
		</td>
		<td class="absolute flex -mt-2 whitespace-nowrap px-3 py-4 text-sm text-zinc-300 z-50">
			@ui.Dropdown(ui.DropdownProps{
				ButtonText: "...",
				Items: []ui.DropdownItemProps{
					{
						Label:   "Delete",
						Icon:    "fa-solid fa-trash",
						Variant: "text-red-400",
						OnClick: ui.OpenDialog("delete_api_key_" + apiKey.ID),
					},
				},
				ButtonClass:   "flex items-center gap-x-4 py-3 text-sm leading-6 font-normal text-white hover:opacity-75 transition",
				DropdownClass: "-mt-2 -right-4 top-4 bg-zinc-900 text-white border border-zinc-300/20",
			})
			@ui.Dialog(ui.DialogProps{
				Id:          "delete_api_key_" + apiKey.ID,
				Title:       "Delete API Key",
				Description: "Are you sure you want to delete your API key?",
			}) {
				@ui.Button(ui.ButtonProps{
					Variant:  ui.ButtonVariantDanger,
					HxDelete: "/mails/api_keys/" + apiKey.ID,
				}) {
					Delete API Key
				}
			}
		</td>
	</tr>
}

templ addApiKeyDialog(mailDomains []models.MailDomain) {
	<form hx-post="/mails/api_keys">
		@ui.Dialog(ui.DialogProps{
			Id:    "add_api_key",
			Title: "Add API Key",
			Class: "!px-0",
		}) {
			@ui.InputField(ui.InputFieldProps{
				DivClass:    "px-6 pb-4",
				Label:       "Name",
				Id:          "name",
				Placeholder: "Enter a name",
				Required:    true,
				Extra: map[string]any{
					"minlength": "3",
				},
			})
			@ui.SelectField(ui.SelectFieldProps{
				DivClass:    "px-6 pb-4",
				Label:       "Domain",
				Id:          "domain_id",
				Placeholder: "Select a domain",
				Options:     getSelectOptionsForMailDomains(mailDomains),
			})
			<div class="px-6 pt-4 border-t border-zinc-300/10">
				@ui.Button(ui.ButtonProps{
					Icon:   "fa-solid fa-plus",
					HxPost: "/mails/api_keys",
				}) {
					Add API Key
				}
			</div>
		}
	</form>
}

func getSelectOptionsForMailDomains(mailDomains []models.MailDomain) []ui.SelectFieldOption {
	var options []ui.SelectFieldOption
	options = append(options, ui.SelectFieldOption{
		Label: "All Domains",
		Value: "",
	})
	for _, mailDomain := range mailDomains {
		options = append(options, ui.SelectFieldOption{
			Label: mailDomain.Domain,
			Value: mailDomain.ID,
		})
	}
	return options
}
