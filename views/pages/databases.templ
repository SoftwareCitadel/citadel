package pages

import (
	"citadel/views/ui"
	"citadel/views/layouts"
	"citadel/app/models"
)

templ DatabasesPage(dbs []models.Database) {
	@layouts.DashboardLayout(layouts.DashboardLayoutProps{}) {
		<div class="flex items-center space-x-8">
			<h2 class="text-3xl text-gradient font-semibold font-clash">
				Databases
			</h2>
			@ui.Button(ui.ButtonProps{
				Icon:    "fa-solid fa-plus",
				OnClick: ui.OpenDialog("create_database"),
			}) {
				Create New Database
			}
			@createDatabaseDialog()
		</div>
		<div class="gap-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
			for _, db := range dbs {
				@connectDatabaseDialog(db)
				@deleteDatabaseDialog(db)
				@databaseCard(db)
			}
		</div>
	}
}

templ createDatabaseDialog() {
	<form hx-post="/databases" x-data="{ dbms: 'postgres' }" hx-swap="outerHTML">
		@ui.SteppedDialog(ui.SteppedDialogProps{
			Id:           "create_database",
			Title:        "New Database",
			Steps:        []ui.Step{chooseDbmsStep(), credentialsStep()},
			ActionButton: createDatabaseDialogActionButton,
		})
	</form>
}

templ createDatabaseDialogActionButton() {
	@ui.Button(ui.ButtonProps{
		OnClick: ui.CloseDialog("create_database"),
		Type:    "submit",
	}) {
		Create Database
	}
}

templ chooseDbmsStep() {
	<div class="grid sm:grid-cols-2 gap-4 grid-flow-row auto-rows-fr px-6 pb-4">
		<label
			class="flex cursor-pointer flex-col space-y-2 items-center justify-center space-x-2 rounded p-4 border border-zinc-300/20"
		>
			<img src={ `/assets/icons/postgres.svg` } class="w-8 h-8" alt="PostgreSQL icon"/>
			<span class="text-sm text-white">Postgres</span>
			<input
				class="h-3 w-3 text-yellow-300 focus:ring-0"
				type="radio"
				id="postgres"
				name="dbms"
				value="postgres"
				x-model="dbms"
			/>
		</label>
		<label
			class="flex cursor-pointer flex-col space-y-2 items-center justify-center space-x-2 rounded p-4 border border-zinc-300/20"
		>
			<img src={ `/assets/icons/mysql.svg` } class="w-8 h-8" alt="MySQL icon"/>
			<span class="text-sm text-white">MySQL</span>
			<input
				class="h-3 w-3 text-yellow-300 focus:ring-0"
				type="radio"
				id="mysql"
				name="dbms"
				value="mysql"
				x-model="dbms"
			/>
		</label>
		<label
			class="flex cursor-pointer flex-col space-y-2 items-center justify-center space-x-2 rounded p-4 border border-zinc-300/20"
		>
			<img src={ `/assets/icons/redis.svg` } class="w-8 h-8" alt="Redis icon"/>
			<span class="text-sm text-white">Redis</span>
			<input
				class="h-3 w-3 text-yellow-300 focus:ring-0"
				type="radio"
				id="redis"
				name="dbms"
				value="redis"
				x-model="dbms"
			/>
		</label>
	</div>
}

templ credentialsStep() {
	<div class="flex flex-col">
		<input type="hidden" id="dbms" name="dbms" x-model="dbms"/>
		<template x-if="dbms === 'postgres'">
			@ui.InputField(ui.InputFieldProps{
				Label:       "Database Username",
				Placeholder: "my-username",
				Id:          "username",
				DivClass:    "px-6 pb-4",
				Extra: map[string]any{
					"minlength": 3,
				},
			})
		</template>
		@ui.InputField(ui.InputFieldProps{
			Label:       "Database Name",
			Placeholder: "my-database",
			Id:          "name",
			DivClass:    "px-6 pb-4",
			Class:       "lowercase",
			Slugify:     true,
			Extra: map[string]any{
				"minlength": 3,
			},
		})
		@ui.InputField(ui.InputFieldProps{
			Label:       "Database Password",
			Placeholder: "••••••••••",
			Id:          "password",
			Type:        "password",
			DivClass:    "px-6 pb-4",
		})
	</div>
}

templ databaseCard(db models.Database) {
	@ui.Card(ui.CardProps{}) {
		<div class="flex justify-between items-center space-x-2">
			<h3 class="font-semibold leading-none tracking-tight text-xl text-white !text-lg">
				{ db.Name }
			</h3>
			@databaseCardDropdown(db)
		</div>
		<p class="text-sm text-white">
			{ db.Slug }
		</p>
		<img
			src={ "/assets/icons/" + string(db.DBMS) + ".svg" }
			class="pt-1 w-7 h-7"
			alt="Database icon"
		/>
	}
}

templ databaseCardDropdown(db models.Database) {
	<div
		class="mt-auto relative"
		x-data="{
			open: false,
			toggle() {
				if (this.open) {
					return this.close()
				}

				this.$refs.button.focus()

				this.open = true
			},
			close(focusAfter) {
				if (! this.open) return

				this.open = false

				focusAfter && focusAfter.focus()
			}
		}"
		x-on:keydown.escape.prevent.stop="close($refs.button)"
		x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
		x-id="['dropdown-button']"
	>
		<button
			class="flex items-center gap-x-4 py-3 text-sm leading-6 font-normal text-white hover:opacity-75 transition"
			type="button"
			x-ref="button"
			x-on:click="toggle()"
			:aria-expanded="open"
			:aria-controls="$id('dropdown-button')"
			type="button"
		>
			<i class="fa-solid fa-ellipsis-vertical h-3 w-3"></i>
		</button>
		<!-- Panel -->
		<div
			x-ref="panel"
			x-show="open"
			x-transition.origin.bottom.right
			x-on:click.outside="close($refs.button)"
			:id="$id('dropdown-button')"
			style="display: none;"
			class="absolute top-8 -right-4 my-2 w-40 rounded-md bg-zinc-900 text-white border border-zinc-300/20 shadow-md"
		>
			<button
				class="w-full px-3 py-2 relative flex space-x-2 cursor-default select-none items-center rounded-sm text-sm outline-none transition-colors focus:bg-zinc-300/10 focus:text-zinc-300-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 hover:opacity-75 transition cursor-pointer"
				type="button"
				onClick={ ui.OpenDialog("connect_database_" + db.Slug) }
			>
				<i class="fa-solid fa-plug w-3 h-4"></i>
				<span>Connect</span>
			</button>
			<div role="separator" aria-orientation="horizontal" class="h-px bg-zinc-300/20"></div>
			<button
				class="w-full text-red-400 px-3 py-2 relative flex space-x-2 cursor-default select-none items-center rounded-sm text-sm outline-none transition-colors focus:bg-zinc-300/10 focus:text-zinc-300-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 hover:opacity-75 transition cursor-pointer"
				type="button"
				onClick={ ui.OpenDialog("delete_database_" + db.Slug) }
			>
				<i class="fa-solid fa-trash w-3 h-4"></i>
				<span>Delete</span>
			</button>
		</div>
	</div>
}

templ connectDatabaseDialog(db models.Database) {
	@ui.Dialog(ui.DialogProps{
		MainClass: "lg:max-w-[32rem]",
		Id:        "connect_database_" + db.Slug,
		Title:     "Connect to my database",
	}) {
		<div class="flex items-end pb-4">
			<div class="grid gap-1 w-full">
				@ui.Label(ui.LabelProps{
					Label: "URI",
				})
				<div class="flex !w-full">
					<input value={ db.GetURI() } class="base-input !rounded-r-none" readonly/>
					<button
						class="bg-zinc-900 hover:opacity-75 transition text-white px-4 py-[6px] text-sm rounded-r border-l-0 border-zinc-300/20 border duration-200 flex items-center justify-center"
						onClick={ ui.CopyValueToClipboard("uri", db.GetURI()) }
					>
						<i class="fa-regular fa-copy" id="uri"></i>
					</button>
				</div>
				@connectDatabaseCode(db)
			</div>
		</div>
	}
}

templ deleteDatabaseDialog(db models.Database) {
	@ui.Dialog(ui.DialogProps{
		Id:          "delete_database_" + db.Slug,
		Title:       "Delete Database",
		Description: "Are you sure you want to delete your database? All data will be lost (forever).",
	}) {
		@ui.Button(ui.ButtonProps{
			Variant:  ui.ButtonVariantDanger,
			HxDelete: "/databases/" + db.Slug,
		}) {
			Delete Database 
		}
	}
}

templ connectDatabaseCode(db models.Database) {
	<script type="module">
    import { codeToHtml } from 'https://esm.sh/shiki@1.0.0'

	const codeTemplates = {
javascript: {
	postgres: `const { Pool } = require('pg');
	const pool = new Pool({
	connectionString: '{{databaseUri}}'
});

pool.query('SELECT * FROM users', (error, results) => {
	if (error) {
		throw error;
	}
	console.log('postgres Results:', results.rows);
});`,
	mysql: `const mysql = require('mysql');
const mysqlClient = mysql.createConnection('{{databaseUri}}');

connection.connect();

connection.query('SELECT * FROM users', (error, results, fields) => {
	if (error) {
		throw error;
	}
	console.log('MySQL Results:', results);
});

connection.end();`,
	redis: `const redis = require('redis');
const client = redis.createClient({ url: '{{databaseUri}}' });

client.get('key', (error, result) => {
	if (error) {
		throw error;
	}
	console.log('Redis Result:', result);
});`,
},
php: {
	postgres: `<?php
$conn = pg_connect($databaseUri);

if (!$conn) {
	die('postgres connection failed');
}

$query = 'SELECT * FROM users';
$result = pg_query($conn, $query);

if (!$result) {
	die('postgres query failed');
}

while ($row = pg_fetch_assoc($result)) {
	print_r($row);
}

pg_close($conn);
?>`,
	mysql: `<?php
$conn = mysqli_connect('{{host}}', '{{username}}', '{{password}}', '{{name}}');

if (!$conn) {
	die('MySQL connection failed');
}

$query = 'SELECT * FROM users';
$result = mysqli_query($conn, $query);

if (!$result) {
	die('MySQL query failed');
}

while ($row = mysqli_fetch_assoc($result)) {
	print_r($row);
}

mysqli_close($conn);
?>`,
	redis: `<?php
$databaseUri = '{{databaseUri}}';
$redis = new Redis();
$redis->connect($databaseUri);

$value = $redis->get('key');
if ($value === false) {
	die('Redis key not found');
}

echo 'Redis Result: ' . $value;
?>`,
},
python: {
	postgres: `import psycopg2

conn = psycopg2.connect('{{databaseUri}}')
cursor = conn.cursor()

cursor.execute('SELECT * FROM users')
records = cursor.fetchall()

for record in records:
	print(record)

cursor.close()
conn.close()`,
	mysql: `import mysql.connector

conn = mysql.connector.connect(
	host='{{host}}',
	user='{{username}}',
	password='{{password}}',
	database='{{name}}'
)

cursor = conn.cursor()

cursor.execute('SELECT * FROM users')
records = cursor.fetchall()

for record in records:
	print(record)

cursor.close()
conn.close()`,
	redis: `import redis

r = redis.StrictRedis.from_url('{{databaseUri}}')

value = r.get('key')
if value is not None:
	print('Redis Result:', value.decode('utf-8'))
else:
	print('Redis key not found')`,
},
java: {
	postgres: `import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class postgresExample {
	public static void main(String[] args) {
		String databaseUri = "{{databaseUri}}";
		Connection connection = null;

		try {
			connection = DriverManager.getConnection(databaseUri);
			Statement statement = connection.createStatement();
			String query = "SELECT * FROM users";
			ResultSet resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				System.out.println(resultSet.getString("column_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}`,
	mysql: `import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class MySQLExample {
	public static void main(String[] args) {
		String databaseUri = "{{databaseUri}}";
		Connection connection = null;

		try {
			connection = DriverManager.getConnection(databaseUri);
			Statement statement = connection.createStatement();
			String query = "SELECT * FROM users";
			ResultSet resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				System.out.println(resultSet.getString("column_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}`,
	redis: `import redis.clients.jedis.Jedis;

public class RedisExample {
	public static void main(String[] args) {
		String databaseUri = "{{databaseUri}}";
		Jedis jedis = new Jedis(databaseUri);

		String value = jedis.get("key");
		if (value != null) {
			System.out.println("Redis Result: " + value);
		} else {
			System.out.println("Redis key not found");
		}

		jedis.close();
	}
}`,
},
	}

	const formatTemplate = (payload) => {
		const { databaseUri, runtime, database } = payload
		const template = codeTemplates[runtime][database]

		if (!template) {
			throw new Error(`Template not found for runtime '${runtime}' and database '${database}'`)
		}

		return template
			.replace('{{databaseUri}}', databaseUri)
			.replace('{{host}}', payload.host)
			.replace('{{name}}', payload.name)
			.replace('{{username}}', payload.username)
			.replace('{{password}}', payload.password)
	}

    const codeSnippetsBlocks = document.querySelectorAll('#connect_database_code_snippet')
    for (const codeSnippet of codeSnippetsBlocks) {
      const dbms = codeSnippet.getAttribute('data-dbms')
	  const codeBlocks = codeSnippet.querySelectorAll('code')

	  for (const codeBlock of codeBlocks) {
		const lang = codeBlock.getAttribute('data-lang')
		const content = formatTemplate({
			runtime: lang,
			database: dbms,
			databaseUri: codeSnippet.getAttribute('data-uri'),
			host: codeSnippet.getAttribute('data-host'),
			name: codeSnippet.getAttribute('data-name'),
			username: codeSnippet.getAttribute('data-username'),
			password: codeSnippet.getAttribute('data-password'),
		})

		codeBlock.innerHTML = await codeToHtml(content, {
			lang,
			theme: 'monokai'
	 	})
	  }
    }
  	</script>
	<script>
  	function getClass(value, selectedLanguage) {
		if (value === selectedLanguage) {
			return 'py-3 text-sm text-yellow-400 border-b border-yellow-500 cursor-pointer'
		}
		return 'text-zinc-400 text-sm hover:text-zinc-300 transition-colors cursor-pointer'
	}
  	</script>
	<div
		class="border border-zinc-700 rounded-xl bg-zinc-900 text-white max-w-5xl mt-6"
		id="connect_database_code_snippet"
		data-database-id={ db.Slug }
		data-dbms={ string(db.DBMS) }
		data-host={ db.Host }
		data-name={ db.Name }
		data-username={ db.Username }
		data-password={ db.Password }
		data-uri={ db.GetURI() }
		x-data="{ selectedLanguage: 'javascript' }"
	>
		<div class="px-4 flex space-x-4 border-b border-zinc-700">
			<button
				x-bind:class="getClass('javascript', selectedLanguage)"
				x-on:click="selectedLanguage = 'javascript'"
			>
				Node.js
			</button>
			<button
				x-bind:class="getClass('python', selectedLanguage)"
				x-on:click="selectedLanguage = 'python'"
			>
				Python
			</button>
			<button
				x-bind:class="getClass('java', selectedLanguage)"
				x-on:click="selectedLanguage = 'java'"
			>
				Java
			</button>
			<button
				x-bind:class="getClass('php', selectedLanguage)"
				x-on:click="selectedLanguage = 'php'"
			>
				PHP
			</button>
		</div>
		<div
			style="color: rgb(70, 74, 77); transform: none; background: black !important;"
			class="rounded-b-xl overflow-auto leading-6 text-sm sm:text-sm min-h-72 h-72 max-h-72 lg:w-[26rem] lg:max-w-[26rem] overflow-x-auto"
		>
			<code
				x-show="selectedLanguage === 'javascript'"
				class="block p-4 !bg-white/2.5 w-full h-full [&>pre]:!bg-transparent"
				id="code-snippet"
				data-lang="javascript"
			></code>
			<code
				x-show="selectedLanguage === 'python'"
				class="block p-4 !bg-white/2.5 w-full h-full [&>pre]:!bg-transparent"
				id="code-snippet"
				data-lang="python"
			></code>
			<code
				x-show="selectedLanguage === 'java'"
				class="block p-4 !bg-white/2.5 w-full h-full [&>pre]:!bg-transparent"
				id="code-snippet"
				data-lang="java"
			></code>
			<code
				x-show="selectedLanguage === 'php'"
				class="block p-4 !bg-white/2.5 w-full h-full [&>pre]:!bg-transparent"
				id="code-snippet"
				data-lang="php"
			></code>
		</div>
	</div>
}
